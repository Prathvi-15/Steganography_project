import cv2
import numpy as np
import wave
import hashlib
import os
import shutil
import threading
from tkinter import filedialog, messagebox, Tk, Label, Button, Entry, Radiobutton, StringVar, Frame
from tkinter import ttk
from moviepy.editor import VideoFileClip, AudioFileClip
from PIL import Image, ImageTk

# DNA Fingerprint-Based Key Generator
def generate_dna_key(dna_sequence):
    return hashlib.sha256(dna_sequence.encode()).hexdigest()[:16]

# Convert Text to Binary and Back
def text_to_binary(text):
    return ''.join(format(ord(char), '08b') for char in text)

def binary_to_text(binary_data):
    all_bytes = [binary_data[i:i + 8] for i in range(0, len(binary_data), 8)]
    return ''.join([chr(int(byte, 2)) for byte in all_bytes])

# ZIP Handling
def zip_file(file_path, output_path):
    shutil.make_archive(output_path, 'zip', os.path.dirname(file_path), os.path.basename(file_path))

def unzip_file(zip_path, extract_to):
    shutil.unpack_archive(zip_path, extract_to)

# Preview Images
def preview_image(path, label):
    img = Image.open(path).resize((250, 250))
    img_tk = ImageTk.PhotoImage(img)
    label.config(image=img_tk)
    label.image = img_tk

# Encoding and Decoding Functions
def encode_in_image(file_path, message, key, output_path):
    image = cv2.imread(file_path)
    binary_message = text_to_binary(key + message) + '1111111111111110'
    data_index = 0

    for row in image:
        for pixel in row:
            for channel in range(3):
                if data_index < len(binary_message):
                    pixel[channel] = (pixel[channel] & 0xFC) | int(binary_message[data_index:data_index + 2], 2)
                    data_index += 2

    cv2.imwrite(output_path, image)
    zip_file(output_path, output_path.replace('.png', ''))
    messagebox.showinfo("Success", f"Encoded and saved as: {output_path}.zip")

def decode_from_image(file_path, key, result_label):
    image = cv2.imread(file_path)
    binary_data = ""

    # Process every pixel for decoding, can adjust to every 10th pixel for faster decoding
    for row in image:
        for pixel in row:
            for channel in range(3):
                binary_data += format(pixel[channel] & 0x03, '02b')

    # Split the binary data using the delimiter
    binary_data = binary_data.split('1111111111111110', 1)[0]  # Get data before the delimiter
    decoded_message = binary_to_text(binary_data)

    # Check if the decoded message starts with the key
    result = decoded_message[16:] if decoded_message.startswith(key) else "Invalid key!"
    result_label.config(text=f"Decoded Message: {result}")

def encode_in_audio(file_path, message, key, output_path):
    with wave.open(file_path, 'rb') as audio:
        frame_bytes = bytearray(list(audio.readframes(audio.getnframes())))
        binary_message = text_to_binary(key + message) + '1111111111111110'
        data_index = 0

        for i in range(len(frame_bytes)):
            if data_index < len(binary_message):
                frame_bytes[i] = (frame_bytes[i] & 254) | int(binary_message[data_index])
                data_index += 1

        with wave.open(output_path, 'wb') as encoded_audio:
            encoded_audio.setparams(audio.getparams())
            encoded_audio.writeframes(bytes(frame_bytes))

    zip_file(output_path, output_path.replace('.wav', ''))
    messagebox.showinfo("Success", f"Encoded and saved as: {output_path}.zip")

def decode_from_audio(file_path, key, result_label):
    with wave.open(file_path, 'rb') as audio:
        frame_bytes = bytearray(list(audio.readframes(audio.getnframes())))
        extracted_bits = [str(byte & 1) for byte in frame_bytes]
        binary_data = ''.join(extracted_bits)

    # Split binary data using the delimiter
    binary_data = binary_data.split('1111111111111110', 1)[0]  # Get data before the delimiter
    decoded_message = binary_to_text(binary_data)

    # Check if the decoded message starts with the key
    result = decoded_message[16:] if decoded_message.startswith(key) else "Invalid key!"
    result_label.config(text=f"Decoded Message: {result}")

# GUI Functions
def browse_file():
    path = filedialog.askopenfilename()
    file_path.set(path)

    if media_choice.get() == "Image":
        preview_image(path, preview_label)

def perform_action():
    key = generate_dna_key(dna_key_entry.get())  # Generate the key from DNA sequence
    output_path = filedialog.asksaveasfilename(defaultextension=".png" if media_choice.get() == "Image" else ".wav")
    message = message_entry.get() if action_choice.get() == "Encode" else ""  # Only take message if encoding

    # Perform the corresponding action based on media type and action type
    if media_choice.get() == "Image":
        if action_choice.get() == "Encode":
            encode_in_image(file_path.get(), message, key, output_path + ".png")
        else:
            threading.Thread(target=decode_from_image, args=(file_path.get(), key, result_label)).start()
    elif media_choice.get() == "Audio":
        if action_choice.get() == "Encode":
            encode_in_audio(file_path.get(), message, key, output_path + ".wav")
        else:
            threading.Thread(target=decode_from_audio, args=(file_path.get(), key, result_label)).start()

# GUI Setup
root = Tk()
root.title("DNA Steganography Tool")
root.geometry("800x600")
root.config(bg="#f0f0f0")

media_choice = StringVar(value="Image")
action_choice = StringVar(value="Encode")
file_path = StringVar()

# Frames for Layout
frame_top = Frame(root, bg="#cce7ff", pady=10)
frame_top.pack(fill="x")

frame_left = Frame(root, bg="#e6f2ff", padx=10, pady=10)
frame_left.pack(side="left", fill="y")

frame_right = Frame(root, bg="#ffffff", padx=10, pady=10)
frame_right.pack(side="right", expand=True, fill="both")

# Top Section (Title and Options)
Label(frame_top, text="DNA Steganography", font=("Arial", 24), bg="#cce7ff").pack()

Label(frame_left, text="Select Media Type:", bg="#e6f2ff").grid(row=0, column=0, sticky="w")
Radiobutton(frame_left, text="Image", variable=media_choice, value="Image", bg="#e6f2ff").grid(row=1, column=0, sticky="w")
Radiobutton(frame_left, text="Audio", variable=media_choice, value="Audio", bg="#e6f2ff").grid(row=2, column=0, sticky="w")

Label(frame_left, text="Select Action:", bg="#e6f2ff").grid(row=3, column=0, sticky="w")
Radiobutton(frame_left, text="Encode", variable=action_choice, value="Encode", bg="#e6f2ff").grid(row=4, column=0, sticky="w")
Radiobutton(frame_left, text="Decode", variable=action_choice, value="Decode", bg="#e6f2ff").grid(row=5, column=0, sticky="w")

Label(frame_left, text="Select File:", bg="#e6f2ff").grid(row=6, column=0, sticky="w")
Button(frame_left, text="Browse", command=browse_file).grid(row=7, column=0, sticky="w")

Label(frame_left, text="Enter DNA Key:", bg="#e6f2ff").grid(row=8, column=0, sticky="w")
dna_key_entry = Entry(frame_left, width=30)
dna_key_entry.grid(row=9, column=0)

Label(frame_left, text="Enter Message (for Encode):", bg="#e6f2ff").grid(row=10, column=0, sticky="w")
message_entry = Entry(frame_left, width=30)
message_entry.grid(row=11, column=0)

Button(frame_left, text="Perform", command=perform_action).grid(row=12, column=0, pady=10)

# Right Section (Preview)
Label(frame_right, text="Preview:", font=("Arial", 18), bg="#ffffff").pack()
preview_label = Label(frame_right, bg="#ffffff", width=300, height=300)
preview_label.pack(pady=20)

result_label = Label(frame_right, text="", font=("Arial", 14), bg="#ffffff")
result_label.pack(pady=10)

root.mainloop()